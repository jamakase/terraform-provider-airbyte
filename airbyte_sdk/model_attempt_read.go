/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints.

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte_sdk

import (
	"encoding/json"
)

// AttemptRead struct for AttemptRead
type AttemptRead struct {
	Id            int64         `json:"id"`
	Status        AttemptStatus `json:"status"`
	CreatedAt     int64         `json:"createdAt"`
	UpdatedAt     int64         `json:"updatedAt"`
	EndedAt       *int64        `json:"endedAt,omitempty"`
	BytesSynced   *int64        `json:"bytesSynced,omitempty"`
	RecordsSynced *int64        `json:"recordsSynced,omitempty"`
}

// NewAttemptRead instantiates a new AttemptRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttemptRead(id int64, status AttemptStatus, createdAt int64, updatedAt int64) *AttemptRead {
	this := AttemptRead{}
	this.Id = id
	this.Status = status
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewAttemptReadWithDefaults instantiates a new AttemptRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttemptReadWithDefaults() *AttemptRead {
	this := AttemptRead{}
	return &this
}

// GetId returns the Id field value
func (o *AttemptRead) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AttemptRead) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AttemptRead) SetId(v int64) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *AttemptRead) GetStatus() AttemptStatus {
	if o == nil {
		var ret AttemptStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AttemptRead) GetStatusOk() (*AttemptStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AttemptRead) SetStatus(v AttemptStatus) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *AttemptRead) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *AttemptRead) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *AttemptRead) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *AttemptRead) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *AttemptRead) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *AttemptRead) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise.
func (o *AttemptRead) GetEndedAt() int64 {
	if o == nil || o.EndedAt == nil {
		var ret int64
		return ret
	}
	return *o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptRead) GetEndedAtOk() (*int64, bool) {
	if o == nil || o.EndedAt == nil {
		return nil, false
	}
	return o.EndedAt, true
}

// HasEndedAt returns a boolean if a field has been set.
func (o *AttemptRead) HasEndedAt() bool {
	if o != nil && o.EndedAt != nil {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given int64 and assigns it to the EndedAt field.
func (o *AttemptRead) SetEndedAt(v int64) {
	o.EndedAt = &v
}

// GetBytesSynced returns the BytesSynced field value if set, zero value otherwise.
func (o *AttemptRead) GetBytesSynced() int64 {
	if o == nil || o.BytesSynced == nil {
		var ret int64
		return ret
	}
	return *o.BytesSynced
}

// GetBytesSyncedOk returns a tuple with the BytesSynced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptRead) GetBytesSyncedOk() (*int64, bool) {
	if o == nil || o.BytesSynced == nil {
		return nil, false
	}
	return o.BytesSynced, true
}

// HasBytesSynced returns a boolean if a field has been set.
func (o *AttemptRead) HasBytesSynced() bool {
	if o != nil && o.BytesSynced != nil {
		return true
	}

	return false
}

// SetBytesSynced gets a reference to the given int64 and assigns it to the BytesSynced field.
func (o *AttemptRead) SetBytesSynced(v int64) {
	o.BytesSynced = &v
}

// GetRecordsSynced returns the RecordsSynced field value if set, zero value otherwise.
func (o *AttemptRead) GetRecordsSynced() int64 {
	if o == nil || o.RecordsSynced == nil {
		var ret int64
		return ret
	}
	return *o.RecordsSynced
}

// GetRecordsSyncedOk returns a tuple with the RecordsSynced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptRead) GetRecordsSyncedOk() (*int64, bool) {
	if o == nil || o.RecordsSynced == nil {
		return nil, false
	}
	return o.RecordsSynced, true
}

// HasRecordsSynced returns a boolean if a field has been set.
func (o *AttemptRead) HasRecordsSynced() bool {
	if o != nil && o.RecordsSynced != nil {
		return true
	}

	return false
}

// SetRecordsSynced gets a reference to the given int64 and assigns it to the RecordsSynced field.
func (o *AttemptRead) SetRecordsSynced(v int64) {
	o.RecordsSynced = &v
}

func (o AttemptRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.EndedAt != nil {
		toSerialize["endedAt"] = o.EndedAt
	}
	if o.BytesSynced != nil {
		toSerialize["bytesSynced"] = o.BytesSynced
	}
	if o.RecordsSynced != nil {
		toSerialize["recordsSynced"] = o.RecordsSynced
	}
	return json.Marshal(toSerialize)
}

type NullableAttemptRead struct {
	value *AttemptRead
	isSet bool
}

func (v NullableAttemptRead) Get() *AttemptRead {
	return v.value
}

func (v *NullableAttemptRead) Set(val *AttemptRead) {
	v.value = val
	v.isSet = true
}

func (v NullableAttemptRead) IsSet() bool {
	return v.isSet
}

func (v *NullableAttemptRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttemptRead(val *AttemptRead) *NullableAttemptRead {
	return &NullableAttemptRead{value: val, isSet: true}
}

func (v NullableAttemptRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttemptRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
