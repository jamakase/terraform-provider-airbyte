/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints.

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte_sdk

import (
	"encoding/json"
)

// OAuth2Specification An object containing any metadata needed to describe this connector's Oauth flow
type OAuth2Specification struct {
	// Pointers to the fields in the ConnectorSpecification which are needed to obtain the initial refresh/access tokens for the OAuth flow. Each inner array represents the path in the ConnectorSpecification of the referenced field. For example. Assume the ConnectorSpecification contains params 'app_secret', 'app_id' which are needed to get the initial refresh token. If they are not nested in the config, then the array would look like this [['app_secret'], ['app_id']] If they are nested inside, say, an object called 'auth_params' then this array would be [['auth_params', 'app_secret'], ['auth_params', 'app_id']]
	OauthFlowInitParameters *[][]string `json:"oauthFlowInitParameters,omitempty"`
}

// NewOAuth2Specification instantiates a new OAuth2Specification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuth2Specification() *OAuth2Specification {
	this := OAuth2Specification{}
	return &this
}

// NewOAuth2SpecificationWithDefaults instantiates a new OAuth2Specification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuth2SpecificationWithDefaults() *OAuth2Specification {
	this := OAuth2Specification{}
	return &this
}

// GetOauthFlowInitParameters returns the OauthFlowInitParameters field value if set, zero value otherwise.
func (o *OAuth2Specification) GetOauthFlowInitParameters() [][]string {
	if o == nil || o.OauthFlowInitParameters == nil {
		var ret [][]string
		return ret
	}
	return *o.OauthFlowInitParameters
}

// GetOauthFlowInitParametersOk returns a tuple with the OauthFlowInitParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2Specification) GetOauthFlowInitParametersOk() (*[][]string, bool) {
	if o == nil || o.OauthFlowInitParameters == nil {
		return nil, false
	}
	return o.OauthFlowInitParameters, true
}

// HasOauthFlowInitParameters returns a boolean if a field has been set.
func (o *OAuth2Specification) HasOauthFlowInitParameters() bool {
	if o != nil && o.OauthFlowInitParameters != nil {
		return true
	}

	return false
}

// SetOauthFlowInitParameters gets a reference to the given [][]string and assigns it to the OauthFlowInitParameters field.
func (o *OAuth2Specification) SetOauthFlowInitParameters(v [][]string) {
	o.OauthFlowInitParameters = &v
}

func (o OAuth2Specification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OauthFlowInitParameters != nil {
		toSerialize["oauthFlowInitParameters"] = o.OauthFlowInitParameters
	}
	return json.Marshal(toSerialize)
}

type NullableOAuth2Specification struct {
	value *OAuth2Specification
	isSet bool
}

func (v NullableOAuth2Specification) Get() *OAuth2Specification {
	return v.value
}

func (v *NullableOAuth2Specification) Set(val *OAuth2Specification) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2Specification) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2Specification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2Specification(val *OAuth2Specification) *NullableOAuth2Specification {
	return &NullableOAuth2Specification{value: val, isSet: true}
}

func (v NullableOAuth2Specification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2Specification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
